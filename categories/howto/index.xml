<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Howto on ngkz.log</title>
    <link>https://ngkz.github.io/categories/howto/</link>
    <description>Recent content in Howto on ngkz.log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 20 Oct 2018 10:50:27 +0900</lastBuildDate>
    
	<atom:link href="https://ngkz.github.io/categories/howto/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DOOM Emacsの導入方法 &amp; 設定例</title>
      <link>https://ngkz.github.io/2018/10/doom-emacs-develop-setup/</link>
      <pubDate>Sat, 20 Oct 2018 10:50:27 +0900</pubDate>
      
      <guid>https://ngkz.github.io/2018/10/doom-emacs-develop-setup/</guid>
      <description>&lt;h2 id=&#34;動機&#34;&gt;動機&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;収録ソフトウェアがかなり古くなってきている Ubuntu 14.04 から Linux From Scratch に移行しよう&lt;/li&gt;
&lt;li&gt;この機会に neovim に移行して、vim の設定を一から書き直そう&lt;/li&gt;
&lt;li&gt;エディタ部分は大量に設定を書かないと使い勝手が悪いし、プラグインの導入と設定も面倒だ&lt;/li&gt;
&lt;li&gt;vim 風のキーバインディングで、よりすぐれた操作性を持つ &lt;a href=&#34;http://kakoune.org/why-kakoune/why-kakoune.html&#34;&gt;Kakoune というエディタがあるらしい&lt;/a&gt;。&lt;a href=&#34;https://github.com/ngkz/kakrc&#34;&gt;試してみよう&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;たしかに、設計・デフォルト設定や操作性は vim より良いが、プラグインが足りない&lt;/li&gt;
&lt;li&gt;じゃあプラグインが充実している Emacs だ。素の Emacs は設定が大変らしいから、&lt;a href=&#34;http://spacemacs.org/&#34;&gt;spacemacs&lt;/a&gt;も試してみよう。&lt;/li&gt;
&lt;li&gt;起動が遅い&lt;/li&gt;
&lt;li&gt;Spacemacs より軽い DOOM Emacs というのがあるらしい。これにしよう&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>テストをrootとして動かす方法 (Rust)</title>
      <link>https://ngkz.github.io/2018/08/cargo-run-test-with-sudo/</link>
      <pubDate>Wed, 01 Aug 2018 17:37:33 +0900</pubDate>
      
      <guid>https://ngkz.github.io/2018/08/cargo-run-test-with-sudo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/rust-lang/cargo/issues/1924&#34;&gt;https://github.com/rust-lang/cargo/issues/1924&lt;/a&gt; によると、&lt;code&gt;cargo test --no-run --message-format=json | jq -r &amp;quot;select(.profile.test == true) | .filenames[]&amp;quot;&lt;/code&gt; でテストバイナリの一覧が取得できる。これをsudoで実行するスクリプトを作ればOK&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>依存しているパッケージ(crate)の中身を実行せずに調べる方法 (Rust)</title>
      <link>https://ngkz.github.io/2018/07/audit-cargo-crate/</link>
      <pubDate>Wed, 25 Jul 2018 22:24:30 +0900</pubDate>
      
      <guid>https://ngkz.github.io/2018/07/audit-cargo-crate/</guid>
      <description>cargo fetch1 でパッケージを取得すると、~/.cargo/registry/src/github.com-1ecc6299db9ec823/(パッケージ名)-(バージョン) にパッケージのソースコードが展開される。
Cargo.lockにすべての依存クレートの名前とバージョンが記録されているので、これを見てコードに問題がないか調べることができる。
 cargo buildはビルドスクリプトを実行してしまうのでダメ [return]   </description>
    </item>
    
    <item>
      <title>Galaxy S3(SC-06D)がadbバックアップを戻した後再起動を繰り返すようになったときの対処方法</title>
      <link>https://ngkz.github.io/2013/09/galaxys3-adb-restore-fail/</link>
      <pubDate>Thu, 12 Sep 2013 13:29:56 +0900</pubDate>
      
      <guid>https://ngkz.github.io/2013/09/galaxys3-adb-restore-fail/</guid>
      <description>&lt;h2 id=&#34;リカバリモードに入ってファクトリーリセットする&#34;&gt;リカバリモードに入ってファクトリーリセットする&lt;/h2&gt;

&lt;p&gt;galaxy S3 リカバリモードの入り方:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/QVa3yfxP0Zs&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;バックアップを展開&#34;&gt;バックアップを展開&lt;/h2&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>トレイに格納したKeePassXを復元できるようにする方法</title>
      <link>https://ngkz.github.io/2013/03/howto-reactivate-keepassx/</link>
      <pubDate>Thu, 14 Mar 2013 17:21:07 +0900</pubDate>
      
      <guid>https://ngkz.github.io/2013/03/howto-reactivate-keepassx/</guid>
      <description>&lt;p&gt;Ubuntu 12.10-14.04で確認済み&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;keepassx=1&amp;quot; &amp;gt;&amp;gt; /etc/xdg/sni-qt.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>